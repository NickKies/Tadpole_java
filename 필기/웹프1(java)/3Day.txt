자료형

- 기본자료형

소수

소수를 표현하기 위해 float와 double이 있습니다. 구분하기 위해 float의 경우 f,F를 붙여주고, double일 경우에는 d,D를 붙여주지만 아무표시 하지 않으면 double형이 기본입니다.

float	4byte	±(1.40129846432481707e-45 ~ 3.40282346638528860e+38)
double	8byte	
±(4.94065645841246544e-324d ~ 1.79769313486231570e+308d)


참, 거짓을 나타내는 boolean
자바에서는 참, 거짓을 표현하기 위해 특별한 키워드 true, false가 존재합니다. 1byte의 공간을 메모리에 만듭니다.


글자(문자) 하나를 나타내는 char
알파벳 하나, 한글문자 하나를 의미한다고 생각하면 됩니다. 주의할 점은 char를 이용할 때에는 작은 따옴표(')를 이용해서 표현합니다. 2byte의 공간을 메모리에 만듭니다.
*참조 : 아스키코드표


연산자

연산자는 단순 더하기, 빼기, 곱하기, 나누기 뿐 아니라 연산이 될 수 있는 모든 개발자들의 의사표시를 말합니다.

산술 연산자
산수시간에 배웠던 사칙연산과 나머지 값을 계산하는 연산자가 포함되어 있습니다.

+	a + b	덧셈
-	a - b	뺄셈
*	a * b	곱셈
/	a / b	나눗셈
%	a % b	나머지 예) 10 % 3 -> 1

대입 연산자
데이터를 할당하는 연산자 입니다. 또한 코드를 좀 더 간결하게 사용하기 위해 사용합니다.

=	a = 9;		변수 a 에 값 9 를 할당
+=	a += b;		a = a + b;
-=	a -= b;		a = a - b;
*=	a *= b;		a = a * b;
/=	a /= b;		a = a / b;
%=	a %= b;		a = a % b;

증가, 증감 연산자
별도로 연산 결과를 저장하지 않는 연산자 입니다. 연산 대상에 1을 증거하거나 증감하여 원래의 변수에 자동으로 대입해 줍니다. 중요한 점은 연산자의 위치가 변수 앞인지, 뒤인지에 따라 결과가 달라질 수 있습니다.

++	++a	연산전에 변수값 1증가
	a++	연산후에 변수값 1증가
--	--a	연산전에 변수값 1감소
	a--	연산후에 변수값 1감소

비교 연산자
부등호의 '크다', '작다', '같다', '다르다' 등을 사용해 결과가 true, false를 반환하는 연산자 입니다.

>	a > b	a 가 b 보다 크면 true
>=	a >= b	a 가 b 보다 크거나 같으면 true
<	a < b	a 가 b 보다 작으면 true
<=	a <= b	a 가 b 보다 작거나 같으면 true
==	a == b	a 가 b 와 같으면 true
!=	a != b	a 가 b 와 같지 않으면 true

논리 연산자
제어문에서 조건을 검사하기 위해 많이 사용하며, 여러가지 상황들을 종합적으로 반영할 때 사용합니다.

&&(AND)	a && b	a, b 모두 true 이면 true
||(OR)	a || b	a,b 둘 중 하나라도 true 이면 true
^(XOR)	a ^ b	a, b 의 값이 다르면 true, 같으면 false
!(NOT)	!a	a 가 true 이면 false, false 이면 true

&&(AND)
a	&&	b	결과
true		true	true
true		false	false
false		true	false
false		false	false

||(OR)
a	||	b	결과
true		true	true
true		false	true
false		true	true
false		false	false

^(XOR)
a	^	b	결과
true		true	false
true		false	true
false		true	true
false		false	false


비트 연산자
사람이 이해하는 연산보다 컴퓨터가 쉽게 이해하는 연산자 입니다. 즉 속도향상을 위해 사용되는 연산자 입니다.

!	a ! b	a, b 중 한쪽 bit가 1이면 1
&	a & b	a, b 비트가 모두 1이면 1
^	a ^ b	a, b 비트가 서로 다른 비트를 가지면 1
<<	a << 2	a의 비트를 왼쪽으로 2개 만큼 늘립니다.	
>>	a >> 2	a의 비트를 오른쪽으로 2개 만큼 줄입니다.

int a = 27;
int b = 19;


	32	16	8	4	2	1
		 1	1	0	1	1 (27)
a & b		 1	0	0	1	1 (19)
------------------------------------------------------
		 1	0	0	1	1 (19)


	32	16	8	4	2	1
		 1	1	0	1	1 (27)
a | b		 1	0	0	1	1 (19)
------------------------------------------------------
		 1	1	0	1	1 (27)


	32	16	8	4	2	1
		 1	1	0	1	1 (27)
a ^ b		 1	0	0	1	1 (19)
------------------------------------------------------
		 0	1	0	0	0 (8)


	128	64	32	16	8	4	2	1
				1	1	0	1	1 (27)
a << 2
-----------------------------------------------------------------
		1	1	0	1	1	0	0 (108)


	128	64	32	16	8	4	2	1
				1	1	0	1	1 (27)
a >> 2
-----------------------------------------------------------------
						1	1	0 (6)


