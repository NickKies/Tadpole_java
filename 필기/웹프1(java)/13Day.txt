super와 super()

super 키워드는 부모 클래스로부터 상속받은 필드나 메소드를 자식 클래스에서 참조하는 데 사용하는 참조 변수입니다. 부모 클래스의 멤버와 자식 클래스의 멤버 이름이 같을 경우 super키워드를 사용하여 구별할 수 있습니다. super 참조변수를 사용할 수 있는 대상은 인스턴스 메소드뿐이며, 클래스 메소드에서는 사용할 수 없습니다.

super() 메소드는 부모 클래스의 생성자를 호출할 때 사용됩니다. 자식 클래스의 인스턴스를 생성하면, 해당 인스턴스에는 자식 클래스의 고유 멤버뿐만 아니라 부모 클래스의 모든 멤버까지도 포함되어 있습니다. 따라서 부모 클래스의 멤버를 초기화하기 위해서는 자식 클래스의 생성자에서 부모 클래스의 생성자까지 호출해야만 합니다. 이러한 부모 클래스의 생성자 호출은 모든 클래스의 부모 클래스인 Object클래스의 생성자까지 계속 거슬러 올라가며 수행됩니다.
     
     * super()메소드가 있을 때
	 생성자 호출 방향
	java.lang.Object
		↑
	     부모클래스
		↑
	     자식클래스


메소드 오버라이딩

오버로딩 : 새로운 메소드를 정의하는 것
오버라이딩 : 상속받은 기존의 메소드를 재정의하는 것


Object 클래스

Object 클래스는 java.lang 패키지에 존재하는 클래스입니다. Object 클래스는 모든 자바 클래스의 최고 조상 클래스가 됩니다. 따라서 자바의 모든 클래스는 Object 클래스의 모든 메소드를 바로 사용할 수 있습니다.

java.lang 패키지는 자바에서 가장 기본적인 동작을 수행하는 클래스들의 집합입니다. 자바에서는 java.lang 패키지의 클래스들은 import문을 사용하지 않아도 클래스 이름만으로 사용할 수 있도록 하고 있습니다.

equals() 메소드
해당 인스턴스를 매개변수로 전달받는 참조 변수와 비교하여, 그 결과를 반환합니다. 참조 변수가 가리키는 값을 비교하므로, 서로 다른 두 객체는 언제나 false를 반환하게 됩니다.

toString() 메소드
인스턴스에 대한 정보를 문자열로 반환합니다. 반환되는 문자열은 클래스 이름과 함께 구분자로 '@'가 사용되며, 그 뒤로 16진수 해시코드가 추가됩니다. 16진수 해시코드 값은 인스턴스의 주소를 가리키는 값으로, 인스턴스마다 모두 다르게 반환합니다.


참조변수

다형성을 위해 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하고 있습니다. 참조 변수가 사용할 수 있는 멤버의 갯수가 실제 인스턴스의 멤버 개수보다 같거나 적어야 참조할 수 있습니다.

다형성 : 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 말합니다. 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하여 구현하고 있는데 상속, 추상화와 더불어 객체 지향 프로그래밍을 구성하는 중요한 특징입니다.

클래스이름 인스턴스이름 = new 생성자();

class Animal { ... }

class Dog extens Animal { ... }

Animal animal = new Animal(); // 허용
Dog dog = new Dog(); // 허용
Animal a = new Dog(); // 허용
Dog d = new Animal(); // 오류

1. 특정 타입의 참조 변수로는 같은 타입의 인스턴스를 참조할 수 있습니다.
(멤버의 갯수가 실제 인스턴스의 멤버 개수와 동일하기 때문)
2. 부모 클래스 타입의 참조 변수도 자식 클래스 타입의 인스터스를 참조할 수 있습니다.
(멤버의 갯수가 실제 인스턴스의 멤버 갯수보다 적기 때문)
3. 자식 클래스 타입의 참조 변수는 부모 클래스 타입의 인스턴스를 참조할 수 없습니다.
(멤버의 갯수가 실제 인스턴스의 멤버 개수보다 많기 때문)

* 클래스는 상속을 통해 확장될 수는 있어도 축소될 수는 없으므로, 자식 클래스에서 사용할 수 있는 멤버의 개수가 언제나 부모 클래스와 같거나 많게 됩니다.

참조 변수의 타입 변환

1. 서로 상속 관계에 있는 클래스 사이에서만 타입 변환을 할 수 있습니다.
2. 자식 클래스 타입에서 부모 클래스 타입으로의 타입 변환은 생략할 수 있습니다.
3. 부모 클래스 타입에서 자식 클래스 타입으로의 타입 변환은 반드시 명시해야 합니다.

(변환할타입의클래스이름)변환할참조변수




