패키지(Package)

패키지란 클래스와 인터페이스의 집합을 의미합니다. 서로 관련있는 클래스나 인터페이스를 함께 묶음으로 파일을 효율적으로 관리할 수 있게 됩니다. 또한 협업 시 서로 작업한 클래스 사이에서 발생할 수 있는 이름 충돌 문제도 패키지를 이용하면 피할 수 있습니다.

1. 물리적으로 디렉터리를 의미합니다.
2. 하나의 패키지에 속한 클래스나 인터페이스 파일 모두 해당 패키지 이름의 디렉터리에 포함되어 있습니다.
3. 디렉터리의 계층 구조는 점(.)으로 구분됩니다.

java.lang.String

char[] ch = new char[5];
ch = {'안','녕','하','세','요'};


String str = "안녕하세요";
	=
char[] ch = new char[5];
str = {'안','녕','하','세','요'}; 와 동일한 의미

abcedfg
0123456

String str = new String("abcedfg");			
char ch = str.charAt(3);

패키지의 선언

package 패키지이름;

이름 없는 패키지
자바의 모든 클래스는 반드시 하나 이상의 패키지에 포함되어야 합니다. 하지만 자바 컴파일러는 소스파일에 어떠한 패키지의 선언도 포함되어 있지 않으면, 기본적으로 이름 없는 패키지에 포함해 컴파일합니다. 
(패키지를 명시하지 않은 클래스와 인터페이스는 모두 같은 패키지 안에 포함되게 됩니다.)


String 클래스

C언에서는 문자열을 char형 배열로 표현하지만, 자바에서는 문자열을 위한 String클래스를 별도로 제공합니다. String 클래스에는 문자열과 관련된 작업을 할 때 유용하게 사용할 수 있는 다양한 메소드가 포함되어 있습니다.

* String 인스턴스는 한번 생성되고 나면 그 값을 읽기만 할 수 있는 불변객체 입니다.

String str = "Hello";
str = str + "World";
System.out.println(str); // HelloWorld

charAt() 메소드
문자열의 특정 인덱스에 해당하는 문자를 반환합니다.

compareTo() 메소드
문자열을 인수로 전달된 문자열과 사전순으로 비교를 합니다. 문자열을 비교할 때 대소문자를 구분하여 비교합니다. 만약 두 문자열이 같다면 0을 반환하고, 해당 문자열이 인수로 전달된 문자열보다 작으면 음수를, 크면 양수를 반환합니다. 

concat() 메소드
해당 문자열의 뒤에 인수로 전달된 문자열을 추가한 새로운 문자열을 반환시킵니다. 인수로 전달된 문자열의 길이가 0이면, 해당 문자열을 그대로 반환합니다.

indexOf() 메소드
특정 문자나 문자열이 처음으로 등장하는 위치의 인덱스를 반환합니다. 해당 문자열에 전달된 문자나 문자열이 포함되어 있지 않으면 -1을 반환합니다.

trim() 메소드
문자열의 맨 앞과 맨 뒤에 포함된 모든 공백 문자를 제거해 줍니다.

substring() 메소드
문자열의 원하는 길이만큼 추출해 줍니다.

split() 메소드
특정 문자열을 기준으로 문자열을 잘라서 배열에 넣어줍니다.

문자열.split("기준문자");

String[] str = "abcd&efgh".split("&");
// str[0] = "abcd";
// str[1] = "efgh";

String[] str = "김사과|오렌지|반하나".split("|");
// str[0] = "김사과";
// str[1] = "오렌지";
// str[2] = "반하나";


과제

1. 주민등록번호의 각자리에 2,3,4,5,6,7,8,9,2,3,4,5를 곱합니다. 마지막 자리의 수는 빼놓습니다.
0 0 1 0 1 1 1 0 6 8 5 1		[2]
* * * * * * * * * * * *
2 3 4 5 6 7 8 9 2 3 4 5 

2. 각자리의 곱한 결과를 모두 더합니다.
0 + 0 + 4 + 0 + 6 + 7 + 8 + 0 + 12 + 24 + 20 + 5 = 86

3. 더한 결과를 11로 나눈 나머지 값을 구합니다.
86 % 11 = 9

4. 나눈나머지 값을 11로 뺍니다.
11 - 9 = 2

5. 만약 11로 뺀 결과가 두자리인 경우 10으로 나눈 나머지값을 구합니다.
(해당결과없음)

6. 결과로 나온값이 주민등록번호 마지막 끝자리와 일치하면 유효한 주민등록번호 입니다.
2랑 일치


예시)
주민등록번호를 입력해 주세요. 0010111068512
유효한 주민등록번호 입니다.


힌트

Scanner sc = new Scanner(System.in);
// int num = sc.nextInt();
String str = sc.next();

Integer.parseInt(문자열 또는 문자); // String을 int형으로 변환
예) int num = Integer.parseInt("10");
