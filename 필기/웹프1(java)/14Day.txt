instanceof 연산자

다형성으로 인해 런타임에 참조 변수가 실제로 참조하고 있는 인스턴스의 타입을 확인할 필요가 생기는데 이때 사용하는 연사자가 instanceof 연산자입니다. 참조 변수가 참조하고 있는 인스턴스의 실제 타입을 확인할 수 있게 해줍니다.

문법
참조변수 instanceof 클래스이름

참조변수가 실제로 참조하고 있는 인스턴스의 타입이 클래스이름과 같으면 true, 아니면 false를 반환합니다.


Wrapper 클래스

기본 타입에 해당하는 데이터를 객체로 포장해 주는 클래스입니다. 래퍼 클래스는 각각의 타입에 해당하는 데이터를 인수로 전달받아, 해당 값을 가지는 객체로 만들어 줍니다. 래퍼 클래스는 모두 java.lang 패키지 안에 포함되어 있습니다. 

byte	-> Byte
short	-> Short
int	-> Integer
long	-> Long
float	-> Float
double	-> Double
char	-> Character
boolean	-> Boolean

박싱, 언박싱

레퍼 클래스는 연산을 위해 정의된 클래스가 아니므로, 인스턴스에 저장된 값을 변경할 수 없습니다. 단지, 값을 참조하기 위해 인스턴스를 만들고 만들어진 인스턴스의 값만을 참조할 뿐입니다. 기본 타입의 데이터를 래퍼 클래스의 인스턴스로 변환하는 과정을 박싱이라고하며, 래퍼 클래스의 인스턴스에 자장된 값을 다시 기본 타입으로 데이터를 꺼내는 과정을 언박싱이라고 합니다.

	박싱
int	->	Integer
	<-
	언박싱

문법
Integer num = new Integer(17);	// 박싱

int i = 10;
Integer num = new Integer(i);	// 박싱

int i2 = num.intValue(); // 언박싱

* 래퍼 클래스의 비교연산, 산술연산은 오토언박싱을 통해 가능합니다. 하지만 동등연산자(==)는 연산에 사용해서는 안됩니다. 동등연산자는 두 인스턴스의 값을 비교하는 것이 아니라 두 인스턴스의 주소값을 비교하게 됩니다. 따라서 서로 다른 두 인스턴스를 비교하게 되면 언제나 false값이 반환됩니다.


추상 클래스와 추상 메소드

추상 메소드
자식 클래스에서 반드시 오버라이딩 해야만 사용할 수 있는 메소드를 말합니다. 자바에서 추상 메소드를 선언하고 사용하는 목적은 추상 메소드가 포함된 클래스를 상속받는 자식 클래스가 반드시 추상 메소드를 구현하도록 하기 위함입니다. 

문법
abstract 반환타입 메소드이름();

추상 클래스
하나 이상의 추상 메소드를 포함하는 클래스를 추상 클래스라고 합니다. 추상 클래스는 객체 지향 프로그래밍에서 중요한 특징인 다형성을 가지는 메소드의 집합을 정의할 수 있습니다. 반드시 사용되어야 하는 메소드를 추상 클래스에 추상 메소드로 선언해 놓으면, 이 클래스를 상속받는 모든 클래스에서는 이 추상 메소드를 반드시 재정의 해야 합니다.

문법
abstract class 클래스 이름 {
	abstract 반환타입 메소드이름();
	...
}

추상 클래스의 특징
1. 인스턴스를 생성할 수 없습니다. (자식 클래스에서 추상 클래스의 추상 메소드를 오버라이딩하고 구현을 해야 비로서 자식 클래스의 인스턴스를 만들 수 있습니다.)
2. 생성자와 필드, 일반 메소드등을 모두 만들 수 있습니다.
3. 추상 메소드가 포함된 추상 클래스를 상속받은 모든 자식 클래스는 추상 메소드를 구현해야만 인스턴스를 생성할 수 있으므로 반드시 구현하게 됩니다.


내부 클래스
내부 클래스란 하나의 클래스 내부에 선언된 또 다른 클래스를 의미합니다. 내부 클래스는 외부 클래스에 대해 두 개의 클래스가 서로 긴밀한 관계를 맺고 있을 때 선언할 수 있습니다.

문법
class 외부클래스이름 {
	...
		class 내부클래스이름 {
			...
		}
	...
}

내부 클래스를 사용하는 이유
1. 내부 클래스에서 외부 클래스의 멤버에 쉽게 접근이 가능합니다.
2. 서로 관련 있는 클래스를 논리적으로 묶어서 표현함으로써, 코드의 캡슐화가 증가됩니다.
3. 외부에서는 내부 클래스에 접근할 수 없으므로, 코드의 복잡성을 줄일 수 있스비다.

내부 클래스의 종류
1. 정적 클래스
외부 클래스 영역에 선언된 클래스 중에서 static 키워드를 가지는 클래스

2. 인스턴스 클래스(멤버 클래스)
외부 클래스 영역에 선언된 클래스 중에서 static 키워드를 가지지 않는 클래스

3. 지역 클래스
외부 클래스의 메소드나 초기화 블록에 선언된 클래스

4. 익명 클래스
다른 내부 클래스와 달리 이름을 가지지 않는 클래스. 클래스의 선언과 동시에 객체를 생성하므로, 단 하나의 객체만을 생성하는 일회용 클래스. 따라서  생성자를 선언할 수 없고 단 하나의 클래스나 단 하나의 인터페이스를 상속받거나 구현할 수 있을 뿐입니다.









