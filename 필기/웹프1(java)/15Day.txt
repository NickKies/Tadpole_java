인터페이스(interface) 

인터페이스는 클래스를 만들기 전에 앞으로 이런 기능을 만들겠다라고 협의해 놓는 것을 말합니다.
인터페이스는 그 자체가 객체를 의미하지 않습니다. 어떤 객체가 할 수 있는 기능 자체를 의미하고, 그 기능을 하나의 스펙으로 모은것에 불과합니다. 따라서 인터페이스가 실제 기능을 가지는 것은 아닙니다.

- 인터페이스의 상수는 private로 만들 수 없습니다.
- 인터페이스에는 추상 메소드만 존재합니다.
- 인터페이스는 객체의 타입으로만 사용됩니다.

문법

접근제어자 interface 인터페이스이름 {
	public static final 타입 상수이름 = 값;
	...
	public abstract 메소드이름(매개변수1, 매개변수2 ..);
	...
}

class 클래스이름 implements 인터페이스이름 {
	...
}


예외처리

오류(error)와 예외(exception)

자바 프로그램을 작성할 때 자바 문법에 맞지 않게 코드를 작성하고 컴파일하려고 하면, 자바 컴파일러는 문법 오류(syntax error)를 발생시킵니다. 또한, 자바 문법에는 맞게 작성되었다 하더라도 프로그램이 실행되면서 예상하지 못한 오류가 발생할 수 있습니다. 이렇게 컴퓨터 시스템이 동작하는 도중에 예상하지 못한 사태가 발생하여 실행 중인 프로그램이 영향을 받는 것을 오류(error)와 예외(exception) 두 가지로 구분할 수 있습니다. 오류(error)는 시스템 레벨에서 프로그램에 심각한 문제를 야기하여 실행 중인 프로그램을 종료시킵니다. 이러한 오류는 개발자가 미리 예측하여 처리할 수 없는 것이 대부분이므로, 오류에 대한 처리는 할 수 없습니다. 하지만 예외(exception)는 오류와 마찬가지로 실행 중인 프로그램을 비정상적으로 종료시키지만, 발생할 수 있는 상황을 미리 예측하여 처리할 수 있습니다. 따라서 개발자는 예외 처리(exception handling)를 통해 예외 상황을 처리할 수 있도록 코드의 흐름을 바꿀 필요가 있습니다.

예외처리란 프로그램을 위한 보험 처리와 같습니다. 잘못된 하나로 인해 전체 시스템이 문제가 생기는 결과를 방지하기 위한 처리방법 입니다.

예외가 발생하는 원인
1. 사용자가 잘못된 데이터를 입력하는 경우
2. 개발자가 로직이나 계산을 잘못 작성한 경우
3. 하드웨어나 네트워크가 제대로 동작하지 못하는 경우
4. 악의적으로 잘못된 연산을 요구하거나 시스템을 공격하는 경우

try {
    예외를 처리하길 원하는 실행 코드;
} catch (e1) {
    e1 예외가 발생할 경우에 실행될 코드;
} catch (e2) {
    e2 예외가 발생할 경우에 실행될 코드;
}
...
finally {
    예외 발생 여부와 상관없이 무조건 실행될 코드;
}

