제이쿼리(jQuery)란?

제이쿼리(jQuery)는 오픈 소스 기반의 자바스크립트 라이브러리입니다. 제이쿼리를 이용하면 문서 객체 모델(DOM)과 이벤트에 관한 처리를 손쉽게 구현할 수 있습니다. 또한, Ajax 응용 프로그램 및 플러그인도 제이쿼리를 활용하여 빠르게 개발할 수 있습니다. 제이쿼리를 사용하면 짧고 단순한 코드로도 웹 페이지에 다양한 효과나 연출을 적용할 수 있습니다.

제이쿼리의 역사
제이쿼리는 2006년 미국의 존 레식(John Resig)이 뉴욕시 바캠프(Barcamp)에서 처음으로 소개하였습니다. 현재는 jQuery Team이라는 개발자 그룹이 jQuery Foundation을 통해 개발과 유지 보수를 담당하고 있습니다.

제이쿼리 버전
제이쿼리는 jQuery Foundation을 통해 버전 개발 및 유지 보수가 진행되고 있습니다.

현재 각 제이쿼리 버전별 최신 버전은 다음과 같습니다.

1. 버전 1 : jQuery 1.12.4
2. 버전 2 : jQuery 2.2.4
3. 버전 3 : jQuery 3.2.1

제이쿼리 버전 1은 익스플로러 6, 7, 8 버전에서의 동작까지 모두 지원하는 버전입니다. 제이쿼리 버전 2는 버전 1에서 지원하는 익스플로러 6, 7, 8 버전에 대한 지원을 중단한 버전입니다. 2014년 10월에 배포된 제이쿼리 버전 3은 제이쿼리의 차세대 표준입니다. 제이쿼리 버전 3은 기존 버전과의 호환성을 유지한 채 더욱 간결하게 작성되고, 더욱 빠르게 동작하도록 변경되었습니다. 2019년 4월 10일에는 제이쿼리 버전 3의 최신 버전인 3.4.0 버전이 발표되었습니다.

http://jquery.com/

* 제이쿼리 버전 2와 버전 3는 모두 익스플로러 9 이상에서만 동작합니다.
이 때문에 아직도 많은 웹 사이트에서는 제이쿼리 버전 1을 사용하고 있습니다.


제이쿼리 적용
제이쿼리는 자바스크립트 라이브러리이므로, 제이쿼리 파일은 자바스크립트 파일(.js 파일) 형태로 존재합니다. 따라서 웹 페이지에서 제이쿼리를 사용하기 위해서는 제이쿼리 파일을 먼저 웹 페이지에 로드(load)해야 합니다.

1. 제이쿼리 파일을 다운받아 로드하는 방법

Download the compressed, production jQuery 3.4.1 : 다운받아 그대로 개발에 사용
Download the uncompressed, development jQuery 3.4.1 : 오픈소스 기반으로 수정하여 사용

2. CDN(Content Delivery Network)을 이용하여 로드하는 방법

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>



제이쿼리 문법

$(선택자).동작함수();

달러($) 기호는 제이쿼리를 의미하고, 제이쿼리에 접근할 수 있게 해주는 식별자입니다. 선택자를 이용하여 원하는 HTML 요소를 선택하고, 동작 함수를 정의하여 선택된 요소에 원하는 동작을 설정합니다.

$() 함수
$() 함수는 선택된 HTML 요소를 제이쿼리에서 이용할 수 있는 형태로 생성해 주는 역할을 합니다. $() 함수의 인수로는 HTML 태그 이름뿐만 아니라, CSS 선택자를 전달하여 특정 HTML 요소를 선택할 수 있습니다. 이러한 $() 함수를 통해 생성된 요소를 제이쿼리 객체(jQuery object)라고 합니다. 제이쿼리는 이렇게 생성된 제이쿼리 객체의 메소드를 사용하여 여러 동작을 설정할 수 있습니다.

$(function() {
    제이쿼리 코드;
});

또는

$(document).ready(function() {
    제이쿼리 코드;
});


CSS 선택자

요소의 선택
제이쿼리를 사용하면 손쉽게 HTML 요소를 선택하여, 선택된 요소에 특정 동작을 설정할 수 있습니다. 제이쿼리에서는 요소를 선택하기 위해 대부분의 CSS 선택자뿐만 아니라 몇몇 비표준 선택자까지 제공하고 있습니다.

CSS 선택자를 이용한 선택
태그 이름을 사용하여 같은 태그 이름을 가지는 HTML 요소를 모두 선택할 수 있습니다. 이것은 자바스크립트의 getElementsByTagName() 메소드와 같은 동작을 합니다. 또한 아이디(id)를 사용하여 특정 HTML 요소를 선택할 수도 있습니다. 이것은 자바스크립트의 getElementsById() 메소드와 같은 동작을 합니다.

클래스(class)를 사용하여 같은 클래스에 속하는 HTML 요소를 모두 선택할 수 있습니다. 이것은 자바스크립트의 getElementsByClassName() 메소드와 같은 동작을 합니다.

속성(attribute)을 사용하여 속성이 조건에 맞는 특정 HTML 요소를 선택할 수 있습니다.

* 인접형제 선택자와 일반형제 선택자

E+F : E요소를 뒤따르는 F요소를 선택합니다. E와 F요소 사이에 다른 요소가 존재하면 선택하지 않습니다.
E~F : E요소가 앞에 존재하면 F를 선택합니다. E가 F보다 먼저 등장하지 않으면 선택하지 않습니다.


선택한 요소의 저장

제이쿼리에서는 선택한 요소들을 변수에 저장하여 사용할 수 있습니다.

선택한 요소의 필터링
제이쿼리에서는 선택한 요소 중에서 더욱 세분화된 선택을 하기 위한 필터링을 진행할 수 있습니다.

:eq(n)	    선택한 요소 중에서 인덱스가 n인 요소를 선택함.
:gt(n)	    선택한 요소 중에서 인덱스가 n보다 큰 요소를 모두 선택함.
:lt(n)	    선택한 요소 중에서 인덱스가 n보다 작은 요소를 모두 선택함.
:even	    선택한 요소 중에서 인덱스가 짝수인 요소를 모두 선택함.
:odd	    선택한 요소 중에서 인덱스가 홀수인 요소를 모두 선택함.
:first	    선택한 요소 중에서 첫 번째 요소를 선택함.
:last	    선택한 요소 중에서 마지막 요소를 선택함.
:animated	선택한 요소 중에서 애니메이션 효과가 실행 중인 요소를 모두 선택함.
:header	    선택한 요소 중에서 h1부터 h6까지의 요소를 모두 선택함.
:lang(언어)	선택한 요소 중에서 지정한 언어의 요소를 모두 선택함.
:not(선택자)	선택한 요소 중에서 지정한 선택자와 일치하지 않는 요소를 모두 선택함.
:root	    선택한 요소 중에서 최상위 루트 요소를 선택함.
:target	    선택한 요소 중에서 웹 페이지 URI의 fragment 식별자와 일치하는 요소를 모두 선택함.
:contains(텍스트)	선택한 요소 중에서 지정한 텍스트를 포함하는 요소를 모두 선택함.
:has(선택자)	선택한 요소 중에서 지정한 선택자와 일치하는 자손 요소를 갖는 요소를 모두 선택함.
:empty	    선택한 요소 중에서 자식 요소를 가지고 있지 않은 요소를 모두 선택함.
:parent	    선택한 요소 중에서 자식 요소를 가지고 있는 요소를 모두 선택함.


input 요소의 선택

제이쿼리에서는 입력 양식에 관련된 특정 요소를 손쉽게 선택할 수 있습니다.

:button	    type 속성값이 "button"인 요소를 모두 선택함.
:checkbox	type 속성값이 "checkbox"인 요소를 모두 선택함.
:file	    type 속성값이 "file"인 요소를 모두 선택함.
:image	    type 속성값이 "image"인 요소를 모두 선택함.
:password	type 속성값이 "password"인 요소를 모두 선택함.
:radio	    type 속성값이 "radio"인 요소를 모두 선택함.
:reset	    type 속성값이 "reset"인 요소를 모두 선택함.
:submit	    type 속성값이 "submit"인 요소를 모두 선택함.
:text	    type 속성값이 "text"인 요소를 모두 선택함.
:input	    <input>, <textarea>, <select>, <button>요소를 모두 선택함.
:checked	type 속성값이 "checkbox" 또는 "radio"인 요소 중에서 체크되어 있는 요소를 모두 선택함.
:selected	<option>요소 중에서 선택된 요소를 모두 선택함.
:focus	    현재 포커스가 가지고 있는 요소를 선택함.
:disabled	비활성화되어있는 요소를 모두 선택함.
:enabled	활성화되어있는 요소를 모두 선택함.


getter 메소드와 setter 메소드

선택자에 의해 선택된 요소의 값을 읽거나 설정하기 위해서는 제이쿼리 메소드를 통해 해당 요소에 접근해야만 합니다. getter 메소드는 선택된 요소에 접근하여 그 값을 읽어오기 위한 메소드입니다. 이러한 getter 메소드는 아무런 인수를 전달하지 않고 호출합니다. setter 메소드는 선택된 요소에 접근하여 그 값을 설정하기 위한 메소드입니다. 이러한 setter 메소드는 대입하고자 하는 값을 인수로 전달하여 호출합니다.

var str = $("p").html();	// str = "jQuery";
$("p").html("JavaScript");
<p>jQuery</p>


메소드 체이닝(method chaining)

getter 메소드는 선택된 요소의 값을 읽어서 그 값을 반환합니다. 만약 선택된 요소가 여러 개 존재하면, getter 메소드는 가장 '첫 번째 요소'의 값만을 반환할 것입니다. 하지만 setter 메소드는 선택된 '모든 요소'에 인수로 전달된 값을 설정합니다. 그리고 선택된 모든 요소에 접근할 수 있는 또 다른 제이쿼리 객체를 반환합니다. 이렇게 반환된 제이쿼리 객체를 이용하면 세미콜론(;)을 사용하지 않고도, 곧바로 다른 제이쿼리 메소드를 호출할 수 있습니다. 이런 방식으로 여러 개의 메소드가 연속으로 호출되는 것을 메소드 체이닝(method chaining)이라고 합니다.

add() 메소드 : 특정 요소를 추가로 선택할 때 사용합니다.
addBack() 메소드 : 현재 선택한 요소와 함께 이전에 선택한 요소도 선택하게 합니다.
end() 메소드 : 현재의 연속적인 명령(메소드체이닝)을 종료하고 선택 집합의 이전 요소를 찾아 반환해 줍니다.
is() 메소드 : 인수로 주어진 객체에 해당하는 것이 존재하면 true값을 리턴해 줍니다.

