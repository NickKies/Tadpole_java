이벤트 루프(Event Loop)
node.js 에서는 많은 이벤트를 사용하고 이를 다른 비슷한 언어(기술)보다 빠르게 처리하는 속도를 자랑합니다. node.js 기반으로 만들어진 서버가 가동되면 변수들을 초기화하고 함수를 선언하고 이벤트가 발생할 때까지 기다립니다. 이벤트 위주 어플리케이션에서는 이벤트를 대기하는 메인 루프가 있습니다. 이벤트가 감지 되었을 때 call back함수를 호출합니다. 이벤트가 콜백과 비슷해 보일 수 있지만 차이점은 콜백함수는 비동기식 함수에서 결과를 반환할 때 사용하고, 이벤트 핸들링은 옵저버 패턴에 의해 작동되는 것 입니다.

옵저버
이벤트를 대기하는 함수들이 옵저버 역할을 하는 것입니다. 옵저버들이 이벤트들을 기다리다가 이벤트가 발생하면 이벤트를 처리하는 함수가 실행됩니다. node.js에서 events모듈과 EventEmitter 클래스가 내장되어 있습니다. 이를 사용하여 이벤트와 이벤트 핸들러를 연동 시킬 수 있습니다.

var events = require('events');
var eventEmitter = new events.EventEmitter();

eventEmitter.on(event, listener)
지정한 이벤트의 리스너를 추가합니다.
eventEmitter.once(event, listener)
지정한 이벤트의 리스너를 추가 하지만 한번 실행 이후 자동 제거
eventEmitter.removelistener(event,listener)
지정한 이벤트에 대한 리스너를 제거합니다.

시스템 이벤트 생성
process 객체는 노드에서 언제든지 사용할 수 있는 객체이며, 이미 내부적으로 EventEmitter를 상속받도록 만들어져 있어 on()과 emit()메소드를 바로 사용할 수 있습니다. process() 객체의 on()메소드를 호출하면서 이벤트 이름을 exit로 지정하면 내부적으로 프로세스가 끝날 때를 알 수 있습니다.

http 모듈
Node.js 에서 가장 기본적인 웹 모듈이며 HTTP 웹 서버를 생성하는 것과 관련된 모든 기능을 담당합니다.

1. server 객체
http 모듈에서 가장 중요한 객체는 server 객체 입니다. http모듈의 createServer() 메서드를 사용하여 server 객체를 생성 합니다.

Server객체의 메서드
listen(port) : 서버를 실행합니다.
close() : 서버를 종료합니다.

Server객체의 이벤트
request : 클라이언트가 요청할 때 발생하는 이벤트입니다.
connection : 클라이언트가 접속할 때 발생하는 이벤트입니다.
close : 서버가 종료 될 때 발생하는 이벤트입니다.
checkContinue : 클라이언트가 지속적인 연결을 하고 있을 때 발생하는 이벤트입니다.
upgrade : 클라이언트가 HTTP 업그레이드를 요청할 때 발생하는 이벤트입니다.
clientError : 클라이언트에서 오류가 발생할 때 발생되는 이벤트입니다.

2. response 객체
서버에서 클라이언트로 응답메세지를 전송 시켜줍니다.

response 객체의 메서드
writeHead : 응답 헤더를 작성 합니다.
end : 응답 본문을 작성합니다.

 MIME 형식
 - text/plain : 일반적인 text 파일
 - text/html : html 파일
 - text/css : css 파일
 - text/xml : xml 파일
 - image/jpeg : jpeg 이미지
 - image/png : png 이미지
 - video/mpeg : mpeg 동영상파일
 - audio/mp3 : mp3 파일

http://127.0.0.1:52273/OtherPage
<--------------------><-------->
	URL		pathname

request 객체의 속성
method : 클라이언트 요청 방식을 나타냅니다.
url : 클라이언트가 요청한 URL을 나타냅니다.
headers : 요청 메시지 헤더를 나타냅니다.
trailers : 요청 메시지 트레일러를 나타냅니다.
httpVersion : http 프로토콜 버전을 나타냅니다.

method 속성
method 속성을 이용하여 클라이언트의 요청에 따라 page를 달리할 수 있습니다.
GET : 요청하면서 데이터를 전송, URL을 통해 접속할 때
POST : 요청한 후 데이터를 별도로 전송


외부 웹 모듈

ejs 모듈(Embedded JavaScript)
EJS 모듈은 템플릿 엔진 모듈. 템플릿 엔진 모듈은 특정한 형식인 파일로부터 HTML 페이지를 생성하는 모듈을 의미합니다.

EJS 파일 형식
EJS 파일의 특수 태그
<% CODE %> : 자바스크립트 코드를 입력합니다.
<%= Value %> : 데이터를 출력합니다.

데이터 전달 
render() 메소드의 두 번째 매개 변수에 전달하고자 하는 데이터를 입력하여 전달합니다.