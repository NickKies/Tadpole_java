자바스크립트에서의 날짜 표현

자바스크립트에서는 Date 객체를 사용하여 매 순간 변화하는 시간과 날짜에 관한 정보를 손쉽게 얻을 수 있습니다. Date 객체는 연월일, 시분초의 정보와 함께 밀리초(millisecond)의 정보도 함께 제공합니다.

1. 연도(year) : 1900년(00) ~ 1999년(99)
2. 월(month) : 1월(0) ~ 12월(11) 
3. 일(day) : 1일(1) ~ 31일(31)
4. 시(hours) : 0시(0) ~ 23시(23)
5. 분(minutes) : 0분(0) ~ 59분(59)
6. 초(seconds) : 0초(0) ~ 59초(59)

자바스크립트에서 월(month)을 나타낼 때는 1월이 0으로 표현되고, 12월이 11로 표현된다는 사실에 유의해야 합니다.

Date 객체

1. new Date()
2. new Date("날짜를 나타내는 문자열")
3. new Date(밀리초)
4. new Date(년, 월, 일, 시, 분, 초, 밀리초)

Date 객체를 생성할 때 어떠한 인수도 전달하지 않으면, 현재 날짜와 시간을 가지고 Date 객체를 생성합니다.



브라우저 객체 모델(BOM)

자바스크립트를 이용하면 브라우저의 정보에 접근하거나 브라우저의 여러 기능들을 제어할 수 있습니다. 이때 사용할 수 있는 객체 모델이 바로 브라우저 객체 모델(BOM, Browser Object Model)입니다. 브라우저 객체 모델(BOM)은 문서 객체 모델(DOM)과는 달리 W3C의 표준 객체 모델은 아닙니다. 하지만 이 모델은 자바스크립트가 브라우저의 기능적인 요소들을 직접 제어하고 관리할 방법을 제공해 줍니다. 자바스크립트에서는 이러한 BOM 모델의 객체들을 전역 객체(global object)로 사용할 수 있습니다.

Window 객체
window 객체는 웹 브라우저의 창(window)을 나타내는 객체로, 대부분의 웹 브라우저에서 지원하고 있습니다. 자바스크립트의 모든 객체, 전역 함수, 전역 변수들은 자동으로 window 객체의 프로퍼티가 됩니다. window 객체의 메소드는 전역 함수이며, window 객체의 프로퍼티는 전역 변수가 됩니다. 문서 객체 모델(DOM)의 요소들도 모두 window 객체의 프로퍼티가 됩니다.

window.open() 메소드
window 객체의 open() 메소드를 이용하면, 새로운 브라우저 창을 열 수 있습니다. 또한, 새로운 브라우저 창의 세부적인 옵션들도 일일이 설정할 수 있습니다.

var ret = window.open(url, name, specs, replace);

- 반환값(ret) : 새로 만들어진 창 객체가 반환됩니다. 창의 생성에 실패하면 null을 반환합니다. 이 객체를 통해서 새창을 제어할 수 있습니다. 예로 ret.close(); 로 창을 닫을 수 있습니다.
- url : 새창에 보여질 주소 입니다. 선택적인 값으로 비워두면 빈창(about:blank)이 보입니다.
- name : 새로 열릴 창의 속성 또는 창의 이름을 지정합니다. 선택적인 값으로 기본값은 "_blank" 입니다.
- specs : 선택적인 값으로 창의 크기, 스크롤여부, 리사이즈 가능등의 속성을 지정합니다.
- replace : 히스토리 목록에 새 항목을 만들지 현재 항목을 대체할지 지정합니다.


Location 객체

location 객체는 현재 브라우저에 표시된 HTML 문서의 주소를 얻거나, 브라우저에 새 문서를 불러올 때 사용할 수 있습니다. 이 객체는 Window 객체의 location 프로퍼티와 Document 객체의 location 프로퍼티에 같이 연결되어 있습니다. location 객체의 프로퍼티와 메소드를 이용하면, 현재 문서의 URL 주소를 다양하게 해석하여 처리할 수 있습니다.

href : 페이지의 URL 전체 정보를 반환. URL을 지정하여 페이지를 이동할 수도 있습니다. 
    1. document.write(location.href); // 현재 페이지 정보를 반환
    2. location.href="javascript11.html";   // 해당 페이지로 이동
protocol : 콜론을 포함하는 http 나 ftp 프로토콜 정보를 반환합니다.
hostname : 호스트의 이름과 포트번호를 반환합니다.
pathname : URL 경로부분의 정보를 반환합니다.
port : 포트번호를 반환합니다.
search : ? 이후의 값을 불러옵니다. (파라미터)
hash : 지정한 앵커를 설정한 곳으로 이동하거나 앵커 이름을 반환합니다.
reload() : reflash 합니다.
assign() : 현재 URL을 지정한 URL로 바꿔 페이지를 이동합니다.
replace() : 현재 URL을 지정한 URL로 바꾸고 이전 페이지로 돌아갈 수 없게 합니다.

assign()
		   assign
A사이트	-> B사이트 ->	C사이트
		   <-
		  뒤로가기

replace()
		   replace
A사이트	-> B사이트 ->	C사이트
	<----------------
	     뒤로가기


History 객체

history 객체는 브라우저의 히스토리 정보를 문서와 문서 상태 목록으로 저장하는 객체입니다. 자바스크립트는 사용자의 개인 정보를 보호하기 위해 이 객체에 접근하는 방법을 일부 제한하고 있습니다.

Screen 객체
screen 객체는 사용자의 디스플레이 화면에 대한 다양한 정보를 저장하는 객체입니다.

Navigator 객체
navigator 객체는 브라우저 공급자 및 버전 정보 등을 포함한 브라우저에 대한 다양한 정보를 저장하는 객체입니다. 이 객체의 이름은 넷스케이프(Netscape)의 초기 웹 브라우저였던 네비게이터(Navigator)에서 유래되었습니다.

브라우저 스니핑(browser sniffing)
과거에는 방문자의 웹 브라우저의 종류를 미리 파악하여 조치함으로써, 브라우저 간의 호환성을 유지하였습니다. 이렇게 호환성을 유지하는 방법을 브라우저 스니핑(browser sniffing)이라고 합니다. navigator 객체는 이러한 브라우저 스니핑에서 사용할 수 있는 다양한 표준 프로퍼티 및 비표준 프로퍼티를 제공합니다. 하지만 현재는 이 방법보다 필요한 프로퍼티만을 간단하게 테스트하는 기능 테스팅 방법을 더 많이 사용합니다.


DOM

문서객체모델(DOM)이란?
문서 객체 모델(DOM, Document Object Model)은 XML이나 HTML 문서에 접근하기 위한 일종의 인터페이스입니다. 이 객체 모델은 문서 내의 모든 요소를 정의하고, 각각의 요소에 접근하는 방법을 제공합니다.

<!doctype html>
<html lang="kr">
 <head>
  <meta charset="UTF-8">
  <title>간단한HTML문서</title>
 </head>
 <body>
	<h1>HTML문서</h1>
	<img src="images/javascript.png">
 </body>
</html>

			[Document]
                          [html] - lang
                [head]                  [body]
            [meta]  [title]         [h1]    [img]
                 간단한HTML문서      HTML문서


Document 객체
Document 객체는 웹 페이지 그 자체를 의미합니다. 웹 페이지에 존재하는 HTML 요소에 접근하고자 할 때는 반드시 Document 객체부터 시작해야 합니다.

Document 메소드
- HTML 요소의 선택
	getElementsByTagName() : 해당 태그 이름의 요소를 모두 선택함.
	getElementById() : 해당 아이디의 요소를 선택함.
*자바스크립트에서 아이디(id)를 이용한 선택은 해당 아이디를 가지고 있는 요소 중에서 첫 번째 요소 단 하나만을 선택합니다. 따라서 여러 요소를 선택하고 싶을 때는 태그 이름이나 클래스와 같은 다른 방법을 사용해야 합니다.
	getElementsByClassName() : 해당 클래스에 속한 요소를 모두 선택함.
	getElementByName() : 해당 name 속성값을 가지는 요소를 모두 선택함.
	querySelectorAll() : 해당 선택자로 선택되는 요소를 모두 선택함.


- DOM 요소의 내용 변경
HTML DOM을 이용하면 HTML 요소의 내용(content)이나 속성값 등을 손쉽게 변경할 수 있습니다. HTML 요소의 내용을 변경하는 가장 쉬운 방법은 innerHTML 프로퍼티를 이용하는 것입니다.

노드(node)
HTML DOM은 노드(node)라고 불리는 계층적 단위에 정보를 저장하고 있습니다. HTML DOM은 이러한 노드들을 정의하고, 그들 사이의 관계를 설명해 주는 역할을 합니다. HTML 문서의 정보는 노드 트리(node tree)라고 불리는 계층적 구조에 저장됩니다. 이러한 노드 트리는 노드들의 집합이며, 노드 간의 관계를 보여줍니다. 노드 트리는 최상위 레벨인 루트 노드(root node)로부터 시작하여, 가장 낮은 레벨인 텍스트 노드까지 뻗어 내려갑니다. 자바스크립트에서는 HTML DOM을 이용하여 노드 트리에 포함된 모든 노드에 접근할 수 있습니다.

노드의 종류
문서 노드(document node) : HTML 문서 전체를 나타내는 노드입니다.
요소 노드(element node) : 모든 HTML 요소는 요소 노드이며, 속성 노드를 가질 수 있는 유일한 노드입니다.
속성 노드(attribute node) : 모든 HTML 요소의 속성은 속성 노드이며, 요소 노드에 관한 정보를 가지고 있습니다. 하지만 해당 요소 노드의 자식 노드(child node)에는 포함되지 않습니다.
텍스트 노드(text node) : HTML 문서의 모든 텍스트는 텍스트 노드입니다.
주석 노드(comment node) : HTML 문서의 모든 주석은 주석 노드입니다.

노드 간의 관계를 이용하여 접근하는 방법
1. parentNode : 부모 노드
2. childNodes : 자식 노드 리스트
3. firstChild : 첫 번째 자식 노드
4. lastChild : 마지막 자식 노드
5. nextSibling : 다음 형제 노드
6. previousSibling : 이전 형제 노드

노드에 대한 정보
1. nodeName : nodeName 프로퍼티는 노드 고유의 이름을 저장하므로, 수정할 수 없는 읽기 전용 프로퍼티입니다.
2. nodeValue : nodeValue 프로퍼티는 노드의 값을 저장합니다.
3. nodeType : nodeType 프로퍼티는 노드 고유의 타입을 저장하므로, 수정할 수 없는 읽기 전용 프로퍼티입니다.

요소 노드(element node)         1
속성 노드(attribute node)       2
텍스트 노드(text node)	      3
주석 노드(comment node)	      8
문서 노드(document node)	      9