문제 1. 아래 배열에서 최대값, 최소값을 추출해 내는 프로그램을 작성.

var arr = [90, 80, 70, 100, 50]


문제 2. 아래 배열을 내림차순으로 출력하는 프로그램을 작성.

var arr = [90,80,70,100,50]


함수 (function)

하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록을 의미합니다. 이러한 함수는 필요할 때마다 호출하여 해당 작업을 반복해서 수행할 수 있습니다.

자바스크립트 함수
자바스크립트에서는 함수도 하나의 타입(datatype)입니다. 따라서 함수를 변수에 대입하거나, 함수에 프로퍼티를 지정하는 것도 가능합니다. 또한 자바스크립트 함수는 다른 함수 내에 중첩되어 정의될 수도 있습니다.

function 함수 이름(매개변수1, 매개변수2,..){
	함수가 호출되었을 때 실행하고자 하는 실행문;
	[return 반환값] (써도됨!)
}


변수의 유효 범위(varialble scope)

자바스크립트에서 객체나 함수는 모두 변수입니다. 변수의 유효 범위(scope)란 해당 변수가 접근 할 수 있는 변수, 객체 그리고 함수의 집합을 의미합니다.

지역변수
함수 내에서 선언된 변수를 가리킵니다. 이러한 지역 변수는 변수가 선언된 함수 내에서만 유효하며, 함수가 종료되면 메모리에서 사라집니다. 함수의 매개변수 또한 함수 내에서 정의되는 지역 변수처럼 동작합니다.

전역변수
함수의 외부에서 선언된 변수를 가리킵니다. 이러한 전역 변수는 프로그램의 어느 영역에서나 접근할 수 있으며, 웹 페이지가 닫혀야만 메모리에서 사라집니다.



객체(Object)
실생활에서 우리가 인식할 수 있는 사물로 이해할 수 있습니다.

절차지향 프로그래밍 + 객체지향 프로그래밍

절차지향 프로그래밍이란 물이 위에서 아래로 흐르는 것처럼 순차적인 처리가 중요시 되며 프로그램 전체가 유기적으로 연결 되도록 만드는 프로그래밍 기법입니다. 대표적인 절차지향 언어에는 C언어가 있습니다.

장점 : 컴퓨터의 처리구조와 유사해 실행속도가 빠름
단점 : 유지보수가 어려움, 실행순서가 정해져 있으므로 코드의 순서가 바뀌면 동일한 결과를 보장하기 어려움, 디버깅이 어려움.

객체지향 프로그래밍이란 실제 세계를 모델링하여 소프트웨어를 개발하는 방법입니다. 객체지향 프로그래밍에서는 데이터와 절차를 하나의 덩어리로 묶어서 생각하게 됩니다. 이는 마치 컴퓨터 부품을 하나씩 사다가 컴퓨터를 조립하는 것과 같은 방법입니다.

장점 : 코드의 재활용성이 높음, 코딩이 절차지향보다 간편함, 디버깅이 쉬움
단점 : 처리속도가 절차지향보다 느림, 설계에 많은 시간소요가 들어감

객체의 예

사람
- 이름
- 눈의 갯수
- 키
- 몸무게
...


행동
- 밥을 먹는다
- 걷는다
- 눕는다
- 잠을 잔다
...


객체 : 강아지(dog)

표현방법(property)
name = "루시"
family = "포메리안"
age = "9"
weight = "300"

행동(method)
eat()
sleep()
play()

자바스크립트 객체

자바스크립트의 기본 타입(data type)은 객체입니다. 객체란 이름과 값으로 구성된 property의 정렬되지 않은 집합입니다. 프로퍼티의 값으로 함수가 올 수도 있는데, 이러한 프로퍼티를 메소드라고 합니다.

var dag = {
	name: "루시",
	family: "포메리안",
	age: 9,
	weight : 300
}

document.write(dog.name);


var Man = {
	name: "김윤성",
	birthday : "0303",
	hp : "010111111111",
	gender: "남자",
	makeId: function(){
		return this name+this.birthday;
	}
}


document.write(Man.makeId());	//김윤성0303


객체의 생성

리터럴 표기를 이용한 객체의 생성
자바스크립트에서 객체를 생성하는 가장 쉬운 방법은 리터럴 표기(literal notation)를 이용하는 방법입니다.

var 객체이름 = {
	프로퍼티1이름 : 프로퍼티1의 값,
	프로퍼티2이름 : 프로퍼티2의 값,
	...
};


생성자를 이용한 객체의 생성
new 연산자를 사용하여 객체를 생성하고 초기화할 수 있습니다. 이떄 사용되는 메소드를 생성자(constructor)라고 하며, 이 메소드는 새롭게 생성되는 객체를 초기화하는 역할을 합니다.

function 생성자이름(파라미터1, 파라미터2,...){
	변수명 = 값;
	변수명 = 값;
	..
	함수(){
	}
}

var 객체명1 = new 생성자이름(파라미터1, 파라미터2,...)
var 객체명2 = new 생성자이름(파라미터1, 파라미터2,...)
var 객체명3 = new 생성자이름(파라미터1, 파라미터2,...)
...



















